/* eslint-disable @typescript-eslint/ban-ts-comment */
//@ts-nocheck
import html2canvas from 'html2canvas';
import { csvFormatBody } from 'd3-dsv';
import { arrayJoin } from '$lib/utils';

const getUnit = (ind) => ind.subText || ind.suffix || ind.prefix;

function doDownload(dataUrl, filename) {
	const a = document.createElement('a');
	a.href = dataUrl;
	a.download = filename;
	a.click();
}

function makeColumns(data, indicator) {
	const unit = getUnit(indicator.metadata);
	const cols = [
		{ key: 'areacd', label: 'Area code' },
		{ key: 'areanm', label: 'Area name' },
		{ key: 'xDomainNumb', label: 'Time period' },
		{ key: 'value', label: `Value (${unit})` },
		{ key: 'lci', label: 'Confidence interval lower' },
		{ key: 'uci', label: 'Confidence interval upper' }
	].filter(
		(c) => !(['lci', 'uci'].includes(c.key) && indicator.metadata.confidenceIntervals === 'F')
	);
	const formatKeys = (key) => {
		for (const col of cols) {
			key = key.replace(col.key, col.label);
		}
		return key;
	};
	let keys = Object.keys(data[0]).filter((key) => typeof +key === 'number' && !isNaN(+key));
	keys = keys[0]
		? [...cols.slice(0, 2).map((col) => col.key), ...keys]
		: cols.map((col) => col.key);
	const labels = keys.map(formatKeys);
	return { keys, labels };
}

function sortData(data) {
	const sorted = [...data];
	if (data[0].xDomainNumb) sorted.sort((a, b) => a.xDomainNumb.localeCompare(b.xDomainNumb));
	sorted.sort((a, b) => a.areacd.localeCompare(b.areacd));
	return sorted;
}

export function downloadCSV(data, metadata, indicator, filename = 'data.csv') {
	const cols = makeColumns(data, indicator);
	const xDomain = cols.keys.includes('xDomainNumb')
		? Array.from(new Set(data.map((d) => d.xDomainNumb))).sort((a, b) => a - b)
		: null;
	const xDomainArr = xDomain
		? metadata.periodsLookupArray.filter(
				(t) =>
					t.periodGroup === indicator.periodGroup &&
					t.xDomainNumb >= xDomain[0] &&
					t.xDomainNumb <= xDomain[xDomain.length - 1]
			)
		: null;
	const xDomainMap = xDomainArr
		? (() => {
				const map = {};
				xDomainArr.forEach((t) => (map[t.xDomainNumb] = t.label));
				return map;
			})()
		: null;
	const mappedData = xDomainMap
		? data.map((d) => ({ ...d, xDomainNumb: xDomainMap[d.xDomainNumb] }))
		: data;
	let csv = `"${indicator.metadata.label}"
"${indicator.metadata.subtitle}"
"Source: ${arrayJoin(indicator.metadata.sourceOrg.split('|'))}"

Data download generated by ONS Explore Local Statistics on ${new Date().toLocaleDateString(
		'en-GB',
		{
			year: 'numeric',
			month: 'short',
			day: 'numeric'
		}
	)}
https://explore-local-statistics.beta.ons.gov.uk/indicators/${indicator.metadata.slug}\n\n`;
	csv += `${cols.labels.join(',')}\n${csvFormatBody(sortData(mappedData), cols.keys)}`;

	const url = window.URL || window.webkitURL || window;
	const blob = new Blob([csv], { type: 'text/csv' });
	doDownload(url.createObjectURL(blob), filename);
}

export async function downloadPNG(el, filename = 'chart.png') {
	html2canvas(el, { windowWidth: el.scrollWidth, windowHeight: el.scrollHeight }).then((canvas) =>
		doDownload(canvas.toDataURL(), filename)
	);
}

export function clip(str, msg) {
	navigator.clipboard.writeText(str).then(() => alert(msg));
}
